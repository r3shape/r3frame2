from ....atom import R3atom
from ....utils import div2_v2i, div_v2i, sub_v2, add_v2, mul_v2
import r3frame2 as r3

class R3zonePartition(R3atom):
    def __init__(
            self,
            cell_size: list[int] = [32, 32],
            zone_size: list[int] = [16, 16],
            zone_origin: list[int] = [0, 0]
    ) -> None:
        self.zone_origin: list[int] = [*map(int, zone_origin)]

        self.cell_width: int = int(cell_size[0])
        self.cell_height: int = int(cell_size[1])
        self.cell_size: list[int] = [*map(int, cell_size)]
        self.cell_area: int = self.cell_size[0] * self.cell_size[1]
        
        self.zone_width: int = int(cell_size[0] * zone_size[0])
        self.zone_height: int = int(cell_size[1] * zone_size[1])
        self.zone_area: int = self.zone_size[0] * self.zone_size[1]
        self.zone_size: list[int] = [*map(int, mul_v2(zone_size, cell_size))]

        self.zones: dict[tuple[int], dict[tuple[int], set[r3.resource.R3entity]]] = {}

    def get_zone(self, pos: list[int | float]) -> tuple[int]: ...
    def get_zone_region(self, pos: list[int | float], size: list[int | float], xdir: int = 0, ydir: int = 0) -> list[tuple[int]]: ...

    def get_cell(self, pos: list[int | float]) -> tuple[int]: ...
    def get_cell_region(self, pos: list[int | float], size: list[int | float], xdir: int = 0, ydir: int = 0) -> list[tuple[int]]: ...

    def load_zone(self, pos: list[int]) -> None: ...
    def unload_zone(self, pos: list[int]) -> None: ...

    def load_cell(self, pos: list[int]) -> None: ...
    def unload_cell(self, pos: list[int]) -> None: ...

    def insert(self, entity: "r3.resource.R3entity") -> None: ...
    def remove(self, entity: "r3.resource.R3entity") -> None: ...

    def query_zone(self, pos: list[int | float]) -> set["r3.resource.R3entity"] | set[None]: ...
    def query_zone_region(self, pos: list[int | float], size: list[int | float], xdir: int = 2, ydir: int = 2) -> tuple[set["r3.resource.R3entity"]]: ...
    
    def query_cell(self, pos: list[int | float]) -> set["r3.resource.R3entity"] | set[None]: ...
    def query_cell_region(self, pos: list[int | float], size: list[int | float], xdir: int = 2, ydir: int = 2) -> tuple[set["r3.resource.R3entity"]]: ...

    def update(self, entity: "r3.resource.R3entity") -> None: ...
